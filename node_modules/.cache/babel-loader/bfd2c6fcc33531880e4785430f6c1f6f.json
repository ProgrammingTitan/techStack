{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADING, AUTH_ERR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nimport { returnErrors } from './errorActions'; // Check token and load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    // User loading \n    dispatch({\n      type: USER_LOADING\n    });\n    axios.get('/api/auth/user', tokenConfig(getState)).then(function (res) {\n      return dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERR\n      });\n    });\n  };\n}; // Register User \n\nexport var register = function register(_ref) {\n  var name = _ref.name,\n      email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    // Headers\n    var config = {\n      headers: {\n        'Content-Type': 'application/json'\n      } // Request body\n\n    };\n    var body = JSON.stringify({\n      name: name,\n      email: email,\n      password: password\n    });\n    axios.post('/api/users', body, config).then(function (res) {\n      return dispatch({\n        type: REGISTER_SUCCESS\n      });\n    });\n  };\n}; // Setup Config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // Get token from localstorage\n  var token = getState().auth.token; //Headers \n\n  var config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    } //If token, add to headers\n\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:\\Users\\paval\\Documents\\WebDev\\news-website\\src\\actions\\authActions.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,QAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,WAPJ,EAQIC,gBARJ,EASIC,aATJ,QAWO,SAXP;AAYA,SAASC,YAAT,QAA6B,gBAA7B,C,CAGA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAClD;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AAIAF,IAAAA,KAAK,CACJe,GADD,CACK,gBADL,EACuBC,WAAW,CAACH,QAAD,CADlC,EAECI,IAFD,CAEM,UAAAC,GAAG;AAAA,aACPN,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEb,WADC;AAEPkB,QAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,OAAD,CADD;AAAA,KAFT,EAQCC,KARD,CAQO,UAAAC,GAAG,EAAI;AACZV,MAAAA,QAAQ,CAACF,YAAY,CAACY,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX;AADC,OAAD,CAAR;AAGD,KAbD;AAcH,GApBuB;AAAA,CAAjB,C,CAuBP;;AACA,OAAO,IAAMsB,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,IAAH,QAAGA,IAAH;AAAA,MAASC,KAAT,QAASA,KAAT;AAAA,MAAgBC,QAAhB,QAAgBA,QAAhB;AAAA,SAA8B,UAAAhB,QAAQ,EAAI;AAC9D;AACA,QAAMiB,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OADE,CAMf;;AANe,KAAf;AAOA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,MAAAA,IAAI,EAAJA,IAAD;AAAOC,MAAAA,KAAK,EAALA,KAAP;AAAcC,MAAAA,QAAQ,EAARA;AAAd,KAAf,CAAb;AAEA5B,IAAAA,KAAK,CAACkC,IAAN,CAAW,YAAX,EAA0BH,IAA1B,EAAgCF,MAAhC,EACKZ,IADL,CACY,UAAAC,GAAG;AAAA,aAAIN,QAAQ,CAAE;AACrBE,QAAAA,IAAI,EAAEN;AADe,OAAF,CAAZ;AAAA,KADf;AAIH,GAfuB;AAAA,CAAjB,C,CAiBP;;AACA,OAAO,IAAMQ,WAAW,GAAG,SAAdA,WAAc,CAAAH,QAAQ,EAAI;AAC/B;AACA,MAAMsB,KAAK,GAAGtB,QAAQ,GAAGuB,IAAX,CAAgBD,KAA9B,CAF+B,CAI/B;;AACA,MAAMN,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAiB;AADZ,KADE,CAMf;;AANe,GAAf;;AAOA,MAAGK,KAAH,EAAU;AACNN,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCK,KAAjC;AACH;;AAEL,SAAON,MAAP;AACH,CAjBM","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n\r\n} from './types';\r\nimport { returnErrors } from './errorActions' ; \r\n\r\n\r\n// Check token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // User loading \r\n    dispatch({ type: USER_LOADING}) ; \r\n    \r\n\r\n\r\n    axios\r\n    .get('/api/auth/user', tokenConfig(getState))\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERR\r\n      });\r\n    });\r\n};\r\n\r\n\r\n// Register User \r\nexport const register = ( {name, email, password}) => dispatch => {\r\n    // Headers\r\n    const config = {\r\n        headers: {\r\n            'Content-Type' : 'application/json'\r\n        }\r\n    }\r\n\r\n    // Request body\r\n    const body = JSON.stringify({name, email, password});\r\n\r\n    axios.post('/api/users' , body, config)\r\n        .then ( res => dispatch ({\r\n            type: REGISTER_SUCCESS\r\n        }))\r\n}\r\n\r\n// Setup Config/headers and token\r\nexport const tokenConfig = getState => {\r\n        // Get token from localstorage\r\n        const token = getState().auth.token;\r\n\r\n        //Headers \r\n        const config = {\r\n            headers: {\r\n                \"Content-type\" : \"application/json\"\r\n            }\r\n        }\r\n    \r\n        //If token, add to headers\r\n        if(token) {\r\n            config.headers['x-auth-token'] = token;\r\n        }\r\n\r\n    return config\r\n}"]},"metadata":{},"sourceType":"module"}
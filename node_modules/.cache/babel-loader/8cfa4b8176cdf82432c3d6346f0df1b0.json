{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\paval\\\\documents\\\\WebDev\\\\news-website\\\\src\\\\components\\\\Thread.js\";\nimport React from 'react';\n\nvar Thread =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Thread, _React$Component);\n\n  function Thread(props) {\n    var _this;\n\n    _classCallCheck(this, Thread);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Thread).call(this, props));\n    _this.state = {\n      subreddit: _this.props.subreddit,\n      data: {},\n      gotData: false\n    };\n    return _this;\n  }\n\n  _createClass(Thread, [{\n    key: \"GetReddit\",\n    value: function () {\n      var _GetReddit = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(subreddit) {\n        var response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return fetch(\"https://www.reddit.com/\".concat(subreddit, \".json\"));\n\n              case 2:\n                response = _context.sent;\n                _context.next = 5;\n                return response;\n\n              case 5:\n                json = _context.sent;\n                console.log(json);\n                this.setState({\n                  data: json,\n                  gotData: true\n                });\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function GetReddit(_x) {\n        return _GetReddit.apply(this, arguments);\n      }\n\n      return GetReddit;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          gotData = _this$state.gotData;\n      this.GetReddit(this.state.subreddit);\n      console.log(data);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, \"thread0\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"thread\"));\n    }\n  }]);\n\n  return Thread;\n}(React.Component);\n\nexport default Thread;","map":{"version":3,"sources":["C:\\Users\\paval\\documents\\WebDev\\news-website\\src\\components\\Thread.js"],"names":["React","Thread","props","state","subreddit","data","gotData","fetch","response","json","console","log","setState","GetReddit","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,M;;;;;AAEF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,gFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,SAAS,EAAE,MAAKF,KAAL,CAAWE,SADb;AAETC,MAAAA,IAAI,EAAE,EAFG;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAAb;AAFe;AAOlB;;;;;;;gDAEeF,S;;;;;;;uBACWG,KAAK,kCAA2BH,SAA3B,W;;;AAAtBI,gBAAAA,Q;;uBACaA,Q;;;AAAbC,gBAAAA,I;AACNC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEA,qBAAKG,QAAL,CAAc;AACVP,kBAAAA,IAAI,EAAEI,IADI;AAEVH,kBAAAA,OAAO,EAAE;AAFC,iBAAd;;;;;;;;;;;;;;;;;;6BAMI;AAAA,wBACsB,KAAKH,KAD3B;AAAA,UACIE,IADJ,eACIA,IADJ;AAAA,UACUC,OADV,eACUA,OADV;AAEJ,WAAKO,SAAL,CAAe,KAAKV,KAAL,CAAWC,SAA1B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,CADJ;AAQH;;;;EAlCgBL,KAAK,CAACc,S;;AAuC3B,eAAeb,MAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Thread extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            subreddit: this.props.subreddit,\r\n            data: {},\r\n            gotData: false\r\n        };\r\n    }\r\n\r\n    async GetReddit(subreddit) {\r\n        const response = await fetch(`https://www.reddit.com/${subreddit}.json`);\r\n        const json = await response;\r\n        console.log(json);\r\n        \r\n        this.setState({\r\n            data: json,\r\n            gotData: true\r\n    });\r\n    }\r\n\r\n    render(){\r\n        const { data, gotData } = this.state;\r\n        this.GetReddit(this.state.subreddit);\r\n        console.log(data);\r\n        return(\r\n            <div>\r\n                <p>thread0</p>\r\n            <p>thread</p>\r\n            \r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Thread;"]},"metadata":{},"sourceType":"module"}
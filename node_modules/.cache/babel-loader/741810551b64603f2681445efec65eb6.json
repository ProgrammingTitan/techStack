{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\paval\\\\Documents\\\\WebDev\\\\news-website\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\paval\\\\documents\\\\WebDev\\\\news-website\\\\src\\\\components\\\\Thread.js\";\nimport React from 'react';\n\nvar Thread =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Thread, _React$Component);\n\n  function Thread() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Thread);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Thread)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: {},\n      gotData: false\n    };\n\n    _this.GetReddit =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var subreddit, response, json;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                e.preventDefault();\n                subreddit = _this.props.subreddit;\n                _context.next = 4;\n                return fetch(\"https://www.reddit.com/\".concat(subreddit, \".json\"));\n\n              case 4:\n                response = _context.sent;\n                _context.next = 7;\n                return response.json();\n\n              case 7:\n                json = _context.sent;\n                console.log(json);\n\n                _this.setState({\n                  data: json,\n                  gotData: true\n                });\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return _this;\n  }\n\n  _createClass(Thread, [{\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          data = _this$state.data,\n          gotData = _this$state.gotData;\n      this.GetReddit(e);\n      console.log(data);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"thread0\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \"thread\"));\n    }\n  }]);\n\n  return Thread;\n}(React.Component);\n\nexport default Thread;","map":{"version":3,"sources":["C:\\Users\\paval\\documents\\WebDev\\news-website\\src\\components\\Thread.js"],"names":["React","Thread","state","data","gotData","GetReddit","e","preventDefault","subreddit","props","fetch","response","json","console","log","setState","Component"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;IAEMC,M;;;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AACJC,MAAAA,IAAI,EAAG,EADH;AAEJC,MAAAA,OAAO,EAAG;AAFN,K;;UAMRC,S;;;;;+BAAY,iBAAOC,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAERA,gBAAAA,CAAC,CAACC,cAAF;AACIC,gBAAAA,SAHI,GAGQ,MAAKC,KAAL,CAAWD,SAHnB;AAAA;AAAA,uBAKeE,KAAK,kCAA2BF,SAA3B,WALpB;;AAAA;AAKFG,gBAAAA,QALE;AAAA;AAAA,uBAMWA,QAAQ,CAACC,IAAT,EANX;;AAAA;AAMFA,gBAAAA,IANE;AAORC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;;AAEA,sBAAKG,QAAL,CAAc;AACVZ,kBAAAA,IAAI,EAAES,IADI;AAEVR,kBAAAA,OAAO,EAAE;AAFC,iBAAd;;AATQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;6BAeJ;AAAA,wBACsB,KAAKF,KAD3B;AAAA,UACIC,IADJ,eACIA,IADJ;AAAA,UACUC,OADV,eACUA,OADV;AAEJ,WAAKC,SAAL,CAAeC,CAAf;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ;AACA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,CADJ;AAQH;;;;EAnCgBH,KAAK,CAACgB,S;;AAwC3B,eAAef,MAAf","sourcesContent":["import React from 'react';\r\n\r\nclass Thread extends React.Component{\r\n\r\n    state = {\r\n        data : {},\r\n        gotData : false\r\n\r\n    }\r\n\r\n    GetReddit = async (e)  => {\r\n\r\n        e.preventDefault();\r\n        let subreddit = this.props.subreddit;\r\n        \r\n        const response = await fetch(`https://www.reddit.com/${subreddit}.json`);\r\n        const json = await response.json();\r\n        console.log(json);\r\n        \r\n        this.setState({\r\n            data: json,\r\n            gotData: true\r\n    });\r\n    }\r\n\r\n    render(){\r\n        const { data, gotData } = this.state;\r\n        this.GetReddit(e);\r\n        console.log(data);\r\n        return(\r\n            <div>\r\n                <p>thread0</p>\r\n            <p>thread</p>\r\n            \r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Thread;"]},"metadata":{},"sourceType":"module"}
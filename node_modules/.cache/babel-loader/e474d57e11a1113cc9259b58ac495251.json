{"ast":null,"code":"import axios from 'axios';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, LOGOUT_FAIL, REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nimport { returnErrors } from './errorActions'; // Check token and load user\n\nexport var loadUser = function loadUser() {\n  return function (dispatch, getState) {\n    // User loading \n    dispatch({\n      type: USER_LOADING\n    }); // Get token from localstorage\n\n    var token = getState().auth.token; //Headers \n\n    var config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      } //If token, add to headers\n\n    };\n\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n\n    axios.get('/api/auth/user', config).then(function (res) {\n      return dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\paval\\Documents\\WebDev\\news-website\\src\\actions\\authActions.js"],"names":["axios","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","LOGOUT_FAIL","REGISTER_SUCCESS","REGISTER_FAIL","returnErrors","loadUser","dispatch","getState","type","token","auth","config","headers","get","then","res","payload","data","catch","err","response","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,WAPJ,EAQIC,gBARJ,EASIC,aATJ,QAWO,SAXP;AAYA,SAASC,YAAT,QAA6B,gBAA7B,C,CAGA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAClD;AACAD,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR,CAFkD,CAIlD;;AACA,QAAMa,KAAK,GAAGF,QAAQ,GAAGG,IAAX,CAAgBD,KAA9B,CALkD,CAOlD;;AACA,QAAME,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAiB;AADZ,OADE,CAMf;;AANe,KAAf;;AAOA,QAAGH,KAAH,EAAU;AACNE,MAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACH;;AAEDf,IAAAA,KAAK,CACJmB,GADD,CACK,gBADL,EACuBF,MADvB,EAECG,IAFD,CAEM,UAAAC,GAAG;AAAA,aACPT,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEb,WADC;AAEPqB,QAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,OAAD,CADD;AAAA,KAFT,EAQCC,KARD,CAQO,UAAAC,GAAG,EAAI;AACZb,MAAAA,QAAQ,CAACF,YAAY,CAACe,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAf,MAAAA,QAAQ,CAAC;AACPE,QAAAA,IAAI,EAAEX;AADC,OAAD,CAAR;AAGD,KAbD;AAcH,GAjCuB;AAAA,CAAjB","sourcesContent":["import axios from 'axios';\r\nimport {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    LOGOUT_FAIL,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL\r\n\r\n} from './types';\r\nimport { returnErrors } from './errorActions' ; \r\n\r\n\r\n// Check token and load user\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    // User loading \r\n    dispatch({ type: USER_LOADING}) ; \r\n    \r\n    // Get token from localstorage\r\n    const token = getState().auth.token;\r\n\r\n    //Headers \r\n    const config = {\r\n        headers: {\r\n            \"Content-type\" : \"application/json\"\r\n        }\r\n    }\r\n\r\n    //If token, add to headers\r\n    if(token) {\r\n        config.headers['x-auth-token'] = token;\r\n    }\r\n\r\n    axios\r\n    .get('/api/auth/user', config)\r\n    .then(res =>\r\n      dispatch({\r\n        type: USER_LOADED,\r\n        payload: res.data\r\n      })\r\n    )\r\n    .catch(err => {\r\n      dispatch(returnErrors(err.response.data, err.response.status));\r\n      dispatch({\r\n        type: AUTH_ERROR\r\n      });\r\n    });\r\n};"]},"metadata":{},"sourceType":"module"}